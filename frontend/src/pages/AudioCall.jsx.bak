import React, { useState, useEffect, useRef } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { Device } from '@twilio/voice-sdk';
import { io } from 'socket.io-client';
import toast from 'react-hot-toast';
import { 
    FaMicrophoneSlash as MicOff, 
    FaMicrophone as Mic, 
    FaPhone as Phone, 
    FaPhoneSlash as PhoneOff, 
    FaUsers as Users, 
    FaCommentDots as MessageSquare 
} from 'react-icons/fa';
import axios from 'axios';

const AudioCall = () => {
    const navigate = useNavigate();
    const location = useLocation();
    const { agentIds, topic, type = 'group' } = location.state || {};
    
    const [callState, setCallState] = useState('idle'); // idle, connecting, connected, ended
    const [isMuted, setIsMuted] = useState(false);
    const [isRecording, setIsRecording] = useState(false);
    const [transcript, setTranscript] = useState([]);
    const [participants, setParticipants] = useState([]);
    const [callId, setCallId] = useState(null);
    const [token, setToken] = useState(null);
    const [roomName, setRoomName] = useState(null);
    const [error, setError] = useState('');
    const [typingAgents, setTypingAgents] = useState(new Set());
    const [speakingAgents, setSpeakingAgents] = useState(new Set());
    const [callDuration, setCallDuration] = useState(0);
    const [showTranscript, setShowTranscript] = useState(true);
    
    const deviceRef = useRef(null);
    const socketRef = useRef(null);
    const mediaRecorderRef = useRef(null);
    const audioChunksRef = useRef([]);
    const streamRef = useRef(null);

    const initializeCall = async () => {
        try {
            setCallState('connecting');
            toast.loading('Connecting to call...', { id: 'call-connect' });

            // Debug logging
            console.log('Initializing call with:', { agentIds, topic, type });

            // Create call session
            let response;
            try {
                response = await axios.post('http://localhost:9001/api/call/create', {
                    agentIds,
                    topic,
                    type
                });
                console.log('Call creation response:', response);
            } catch (axiosError) {
                console.error('Axios error:', axiosError);
                throw new Error(`Network error: ${axiosError.message}`);
            }

            // Check if response and data exist
            if (!response || !response.data) {
                console.error('Invalid response:', response);
                throw new Error('Invalid response from server');
            }

            const { callId: newCallId, token: newToken, roomName: newRoom } = response.data;
            
            // Validate required fields
            if (!newCallId || !newToken || !newRoom) {
                console.error('Missing required fields:', { newCallId, newToken, newRoom });
                throw new Error('Invalid call data received from server');
            }
            setCallId(newCallId);
            setToken(newToken);
            setRoomName(newRoom);

            // Initialize Socket.IO
            socketRef.current = io('http://localhost:9001');
            
            socketRef.current.on('connect', () => {
                console.log('Socket connected');
                socketRef.current.emit('join-call', newCallId);
            });

            socketRef.current.on('play-audio', (data) => {
                playAgentAudio(data);
            });

            socketRef.current.on('user-joined', (data) => {
                console.log('User joined:', data);
            });

            socketRef.current.on('agent-response', (data) => {
                handleAgentResponse(data);
                // Remove from typing and add to speaking
                setTypingAgents(prev => {
                    const newSet = new Set(prev);
                    newSet.delete(data.agentName);
                    return newSet;
                });
                setSpeakingAgents(prev => new Set(prev).add(data.agentName));
            });

            socketRef.current.on('agent-typing', (data) => {
                setTypingAgents(prev => new Set(prev).add(data.agentName));
            });

            // Initialize Twilio Device (optional for voice routing)
            try {
                deviceRef.current = new Device(newToken, {
                    codecPreferences: ['opus', 'pcmu'],
                    logLevel: 1
                });

                deviceRef.current.on('registered', () => {
                    console.log('Twilio device registered');
                });

                deviceRef.current.on('error', (error) => {
                    console.warn('Twilio device error (non-critical):', error);
                });

                await deviceRef.current.register();
            } catch (twilioError) {
                console.warn('Twilio registration failed, continuing without it:', twilioError);
                // Continue anyway - we'll use MediaRecorder for audio capture
            }

            // Set state to connected so user can start speaking
            setCallState('connected');
            toast.success('Connected to call! Click "Press to Speak" to start.', { id: 'call-connect' });

            // Fetch participants (agents)
            try {
                const agentsResponse = await axios.post('http://localhost:9001/api/research-agents/by-ids', {
                    agentIds
                });
                setParticipants(agentsResponse.data?.agents || []);
            } catch (agentError) {
                console.warn('Failed to fetch agents:', agentError);
                setParticipants([]);
            }

        } catch (error) {
            console.error('Failed to initialize call:', error);
            
            // Check if error has response property and audioEnabled flag
            const hasResponse = error && typeof error === 'object' && 'response' in error;
            const isAudioDisabled = hasResponse && error.response?.data?.audioEnabled === false;
            
            if (isAudioDisabled) {
                toast.error('Audio calling not available. Please configure audio services.', { id: 'call-connect' });
                setError('Audio services (Twilio, Deepgram, ElevenLabs) are not configured. Please see AUDIO_CALLING_QUICKSTART.md for setup instructions.');
            } else if (error?.message?.includes('Network error')) {
                toast.error('Network error. Please check your connection.', { id: 'call-connect' });
                setError('Network error: Unable to connect to the server. Please check your internet connection.');
            } else {
                const errorMessage = error?.message || 'Unknown error';
                toast.error('Failed to connect to call', { id: 'call-connect' });
                setError(`Call initialization failed: ${errorMessage}`);
            }
            setCallState('idle');
        }
    };

    // Initialize call
    useEffect(() => {
        if (!agentIds || agentIds.length === 0) {
            toast.error('No agents selected for call');
            navigate('/user-research');
            return;
        }

        initializeCall();

        return () => {
            cleanup();
        };
    }, []);

    // Call duration timer
    useEffect(() => {
        if (callState === 'connected') {
            const timer = setInterval(() => {
                setCallDuration(prev => prev + 1);
            }, 1000);

            return () => clearInterval(timer);
        }
    }, [callState]);

    // Format call duration (MM:SS)
    const formatDuration = (seconds) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    };

    const handleAgentResponse = (data) => {
        const { responseText, agentName, timestamp, audioUrl } = data;
        
        // Add to transcript
        setTranscript(prev => [...prev, {
            speaker: agentName,
            text: responseText,
            timestamp: timestamp || new Date().toISOString(),
            type: 'agent'
        }]);

        // Play audio if available
        if (audioUrl) {
            const audio = new Audio(`http://localhost:9001${audioUrl}`);
            audio.play().catch(console.error);
        }
    };

    const playAgentAudio = (data) => {
        const { audioUrl, responseText, agentName, timestamp } = data;
        
        // Add to transcript
        setTranscript(prev => [...prev, {
            speaker: agentName,
            text: responseText,
            timestamp,
            type: 'agent'
        }]);

        // Play audio
        const audio = new Audio(`http://localhost:9001${audioUrl}`);
        audio.play().catch(err => console.error('Error playing audio:', err));
    };

    const toggleMute = async () => {
        if (!isMuted) {
            // Muting - stop recording
            stopRecording();
            setIsMuted(true);
        } else {
            // Unmuting - start recording
            await startRecording();
            setIsMuted(false);
        }
    };

    const startRecording = async () => {
        // Prevent multiple recordings
        if (isRecording) {
            console.log('Already recording, ignoring start request');
            return;
        }

        try {
            // Get microphone access
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            streamRef.current = stream;

            // Create MediaRecorder
            const mediaRecorder = new MediaRecorder(stream);
            mediaRecorderRef.current = mediaRecorder;
            audioChunksRef.current = [];

            mediaRecorder.ondataavailable = (event) => {
                if (event.data.size > 0) {
                    audioChunksRef.current.push(event.data);
                }
            };

            mediaRecorder.onstop = async () => {
                // Process recorded audio
                const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });
                await processAudio(audioBlob);
                audioChunksRef.current = [];
                
                // Stop recording - don't auto-restart
                setIsRecording(false);
            };

            // Start recording in 3-second chunks
            mediaRecorder.start();
            setIsRecording(true);

            // Stop after 3 seconds to process
            setTimeout(() => {
                if (mediaRecorder.state === 'recording') {
                    mediaRecorder.stop();
                }
            }, 3000);

        } catch (error) {
            console.error('Error starting recording:', error);
            toast.error('Microphone access denied');
        }
    };

    const stopRecording = () => {
        if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
            mediaRecorderRef.current.stop();
        }
        if (streamRef.current) {
            streamRef.current.getTracks().forEach(track => track.stop());
        }
        setIsRecording(false);
    };

    const processAudio = async (audioBlob) => {
        if (!audioBlob || !callId || audioBlob.size < 1000) return; // Skip very small recordings

        try {
            // Convert blob to base64
            const reader = new FileReader();
            reader.readAsDataURL(audioBlob);
            
            reader.onloadend = async () => {
                const base64Audio = reader.result.split(',')[1];

                // Add user speech to transcript (placeholder)
                setTranscript(prev => [...prev, {
                    speaker: 'You',
                    text: 'Processing...',
                    timestamp: new Date().toISOString(),
                    type: 'user'
                }]);

                // Send to backend for processing
                const response = await axios.post('http://localhost:9001/api/call/process-speech', {
                    audio: base64Audio,
                    callId,
                    type
                });

                const { responseText, audioUrl, transcript: userTranscript, agentName, region } = response.data;

                // Update user transcript
                setTranscript(prev => {
                    const updated = [...prev];
                    const lastIndex = updated.length - 1;
                    if (updated[lastIndex]?.type === 'user' && updated[lastIndex]?.text === 'Processing...') {
                        updated[lastIndex].text = userTranscript || '(No speech detected)';
                    }
                    return updated;
                });

                // Agent response will come via socket
                if (responseText && audioUrl) {
                    socketRef.current.emit('agent-response', {
                        callId,
                        audioUrl,
                        responseText,
                        agentName,
                        delay: Math.random() * 1000 + 500
                    });
                }
            };
        } catch (error) {
            console.error('Error processing speech:', error);
            console.error('Error response:', error.response?.data);
            
            if (error.response?.status !== 400) {
                const errorDetails = error.response?.data?.details || error.message;
                const errorStep = error.response?.data?.step || 'unknown';
                toast.error(`Failed at ${errorStep}: ${errorDetails}`);
                console.error('Processing failed at step:', errorStep, 'Details:', errorDetails);
            }
        }
    };

    const endCall = async () => {
        try {
            if (callId) {
                await axios.post(`http://localhost:9001/api/call/${callId}/end`);
            }
            cleanup();
            setCallState('ended');
            toast.success('Call ended');
            setTimeout(() => navigate('/user-research'), 2000);
        } catch (error) {
            console.error('Error ending call:', error);
            cleanup();
            navigate('/user-research');
        }
    };

    const cleanup = () => {
        try {
            if (socketRef.current) {
                socketRef.current.emit('leave-call', callId);
                socketRef.current.disconnect();
            }
            if (deviceRef.current) {
                // Only unregister if the device is in 'registered' state
                if (deviceRef.current.state === 'registered') {
                    deviceRef.current.unregister();
                }
                deviceRef.current.destroy();
            }
            if (isRecording) {
                stopRecording();
            }
        } catch (error) {
            console.error('Error during cleanup:', error);
        }
    };

    // Show error state if audio services not available
    if (error && error.includes('Audio services')) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-6">
                <div className="max-w-4xl mx-auto">
                    <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-8 text-center">
                        <div className="text-6xl mb-4">🎙️</div>
                        <h1 className="text-3xl font-bold text-gray-900 mb-4">Audio Calling Not Available</h1>
                        <p className="text-gray-600 mb-6">{error}</p>
                        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                            <h3 className="font-semibold text-blue-900 mb-2">To enable audio calling:</h3>
                            <ol className="text-left text-blue-800 space-y-1">
                                <li>1. Get API keys from Twilio, ElevenLabs, and Deepgram</li>
                                <li>2. Update your .env file with the keys</li>
                                <li>3. Restart the backend server</li>
                                <li>4. See AUDIO_CALLING_QUICKSTART.md for detailed instructions</li>
                            </ol>
                        </div>
                        <button
                            onClick={() => navigate('/user-research')}
                            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-full font-semibold"
                        >
                            Back to User Research
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-900 flex flex-col">
            {/* Top Bar - Google Meet Style */}
            <div className="bg-gray-800 text-white p-4 flex items-center justify-between">
                <div className="flex items-center space-x-4">
                    <h1 className="text-xl font-semibold">{topic || 'User Research Call'}</h1>
                    <span className="text-sm text-gray-400">|</span>
                    <span className="text-sm text-gray-400">{formatDuration(callDuration)}</span>
                </div>
                <div className="flex items-center space-x-3">
                    <div className={`px-3 py-1 rounded-full text-xs font-medium ${
                        callState === 'connected' ? 'bg-green-600' :
                        callState === 'connecting' ? 'bg-yellow-600' :
                        'bg-gray-600'
                    }`}>
                        {callState === 'connected' ? '● Live' :
                         callState === 'connecting' ? '○ Connecting...' :
                         '○ Idle'}
                    </div>
                    <button
                        onClick={() => setShowTranscript(!showTranscript)}
                        className="px-3 py-1 rounded bg-gray-700 hover:bg-gray-600 text-sm"
                    >
                        {showTranscript ? 'Hide Chat' : 'Show Chat'}
                    </button>
                </div>
            </div>

            {/* Main Content Area */}
            <div className="flex-1 flex overflow-hidden">
                {/* Video Grid Area */}
                <div className="flex-1 p-6">
                    {/* Agent Video Tiles - Google Meet Style */}
                    <div className={`grid gap-4 h-full ${
                        participants.length === 1 ? 'grid-cols-1' :
                        participants.length <= 2 ? 'grid-cols-2' :
                        participants.length <= 4 ? 'grid-cols-2' :
                        'grid-cols-3'
                    }`}>
                        {participants.map((agent) => (
                            <div 
                                key={agent.id}
                                className={`relative bg-gray-800 rounded-lg overflow-hidden ${
                                    speakingAgents.has(agent.name) ? 'ring-4 ring-green-500' :
                                    typingAgents.has(agent.name) ? 'ring-4 ring-blue-500' :
                                    ''
                                }`}
                            >
                                {/* Agent Avatar/Video */}
                                <div className="absolute inset-0 flex items-center justify-center bg-gradient-to-br from-blue-900 to-purple-900">
                                    {agent.avatar_url ? (
                                        <img 
                                            src={agent.avatar_url} 
                                            alt={agent.name}
                                            className="w-32 h-32 rounded-full object-cover"
                                        />
                                    ) : (
                                        <div className="w-32 h-32 rounded-full bg-blue-600 flex items-center justify-center text-white text-5xl font-bold">
                                            {agent.name?.charAt(0) || 'A'}
                                        </div>
                                    )}
                                </div>

                                {/* Agent Name Bar */}
                                <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-60 text-white p-3">
                                    <div className="flex items-center justify-between">
                                        <div className="flex items-center space-x-2">
                                            {speakingAgents.has(agent.name) && (
                                                <div className="flex space-x-1">
                                                    <div className="w-1 h-4 bg-green-500 rounded-full animate-pulse"></div>
                                                    <div className="w-1 h-4 bg-green-500 rounded-full animate-pulse" style={{animationDelay: '0.1s'}}></div>
                                                    <div className="w-1 h-4 bg-green-500 rounded-full animate-pulse" style={{animationDelay: '0.2s'}}></div>
                                                </div>
                                            )}
                                            {typingAgents.has(agent.name) && (
                                                <div className="text-blue-400 text-sm">typing...</div>
                                            )}
                                            <span className="font-medium">{agent.name}</span>
                                        </div>
                                        <div className="text-xs text-gray-300">{agent.role}</div>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>

                {/* Chat Sidebar - Google Meet Style */}
                {showTranscript && (
                    <div className="w-96 bg-white border-l border-gray-200 flex flex-col">
                        <div className="p-4 border-b border-gray-200">
                            <h2 className="font-semibold text-gray-900">In-call messages</h2>
                        </div>

                        <div className="flex-1 overflow-y-auto p-4 space-y-3">
                            {transcript.length === 0 ? (
                                <div className="text-center text-gray-400 py-20">
                                    <MessageSquare className="w-16 h-16 mx-auto mb-4 opacity-50" />
                                    <p className="text-sm">No messages yet</p>
                                    <p className="text-xs mt-1">Start speaking to begin the conversation</p>
                                </div>
                            ) : (
                                transcript.map((entry, index) => (
                                    <div key={index} className="flex flex-col space-y-1">
                                        <div className="flex items-center space-x-2">
                                            <span className={`font-medium text-sm ${
                                                entry.type === 'user' ? 'text-blue-600' : 'text-gray-700'
                                            }`}>
                                                {entry.type === 'user' ? 'You' : entry.speaker}
                                            </span>
                                            <span className="text-xs text-gray-400">
                                                {new Date(entry.timestamp).toLocaleTimeString()}
                                            </span>
                                        </div>
                                        <div className={`text-sm ${
                                            entry.type === 'user' ? 'text-gray-900' : 'text-gray-700'
                                        }`}>
                                            {entry.text}
                                        </div>
                                    </div>
                                ))
                            )}
                        </div>
                    </div>
                )}
            </div>

            {/* Bottom Control Bar - Google Meet Style */}
            <div className="bg-gray-800 text-white p-4">
                <div className="max-w-6xl mx-auto flex items-center justify-between">
                    {/* Call Info */}
                    <div className="flex items-center space-x-4">
                        {isRecording && (
                            <div className="flex items-center space-x-2 text-red-400">
                                <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
                                <span className="text-sm">Recording...</span>
                            </div>
                        )}
                        {typingAgents.size > 0 && (
                            <div className="flex items-center space-x-2 text-blue-400">
                                <div className="w-3 h-3 bg-blue-500 rounded-full animate-pulse"></div>
                                <span className="text-sm">
                                    {Array.from(typingAgents)[0]} is thinking...
                                </span>
                            </div>
                        )}
                    </div>

                    {/* Main Controls */}
                    <div className="flex items-center space-x-3">
                        {/* Microphone Button */}
                        <button
                            onClick={isRecording ? stopRecording : startRecording}
                            disabled={callState !== 'connected'}
                            className={`p-4 rounded-full transition-all ${
                                isRecording 
                                    ? 'bg-red-600 hover:bg-red-700' 
                                    : 'bg-white hover:bg-gray-200 text-gray-800'
                            } disabled:opacity-50 disabled:cursor-not-allowed`}
                            title={isRecording ? 'Stop Speaking' : 'Press to Speak'}
                        >
                            {isRecording ? <MicOff className="w-6 h-6" /> : <Mic className="w-6 h-6 text-gray-800" />}
                        </button>

                        {/* End Call Button */}
                        <button
                            onClick={endCall}
                            className="p-4 rounded-full bg-red-600 hover:bg-red-700 transition-all"
                            title="End Call"
                        >
                            <PhoneOff className="w-6 h-6" />
                        </button>

                        {/* Mute Button */}
                        <button
                            onClick={toggleMute}
                            disabled={callState !== 'connected'}
                            className={`p-4 rounded-full transition-all ${
                                isMuted 
                                    ? 'bg-gray-600' 
                                    : 'bg-white hover:bg-gray-200'
                            } disabled:opacity-50 disabled:cursor-not-allowed`}
                            title={isMuted ? 'Unmute' : 'Mute'}
                        >
                            {isMuted ? <MicOff className="w-6 h-6" /> : <Mic className="w-6 h-6 text-gray-800" />}
                        </button>
                    </div>

                    {/* Right Info */}
                    <div className="flex items-center space-x-4">
                        <span className="text-sm text-gray-300">{participants.length} participants</span>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default AudioCall;
                            <div className="space-y-3">
                                {participants.map((agent) => (
                                    <div 
                                        key={agent.id} 
                                        className="flex items-center space-x-3 p-3 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors"
                                    >
                                        {agent.avatar_url ? (
                                            <img 
                                                src={agent.avatar_url} 
                                                alt={agent.name}
                                                className="w-12 h-12 rounded-full object-cover"
                                            />
                                        ) : (
                                            <div className="w-12 h-12 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 font-semibold">
                                                {agent.name?.charAt(0) || 'A'}
                                            </div>
                                        )}
                                        <div className="flex-1">
                                            <p className="font-medium text-gray-900">{agent.name}</p>
                                            <p className="text-sm text-gray-500 truncate">
                                                {agent.demographics?.occupation || 'Participant'}
                                            </p>
                                        </div>
                                    </div>
                                ))}
                            </div>

                            {/* Call Controls */}
                            <div className="mt-6 space-y-3">
                                {/* Main Microphone Button - Start/Stop Recording */}
                                <button
                                    onClick={isRecording ? stopRecording : startRecording}
                                    disabled={callState !== 'connected'}
                                    className={`w-full py-4 px-6 rounded-full font-semibold transition-all flex items-center justify-center space-x-3 ${
                                        isRecording 
                                            ? 'bg-red-600 hover:bg-red-700 text-white shadow-lg' 
                                            : 'bg-blue-600 hover:bg-blue-700 text-white shadow-lg'
                                    } disabled:opacity-50 disabled:cursor-not-allowed`}
                                    aria-label={isRecording ? 'Stop Recording' : 'Start Recording'}
                                >
                                    {isRecording ? (
                                        <>
                                            <MicOff className="w-6 h-6" />
                                            <span className="text-lg">Stop Speaking</span>
                                        </>
                                    ) : (
                                        <>
                                            <Mic className="w-6 h-6" />
                                            <span className="text-lg">Press to Speak</span>
                                        </>
                                    )}
                                </button>

                                {/* Mute/Unmute Button */}
                                <button
                                    onClick={toggleMute}
                                    disabled={callState !== 'connected'}
                                    className={`w-full py-3 px-4 rounded-full font-semibold transition-all flex items-center justify-center space-x-2 ${
                                        isMuted 
                                            ? 'bg-yellow-600 hover:bg-yellow-700 text-white' 
                                            : 'bg-gray-600 hover:bg-gray-700 text-white'
                                    } disabled:opacity-50 disabled:cursor-not-allowed`}
                                    aria-label={isMuted ? 'Unmute' : 'Mute'}
                                >
                                    {isMuted ? <MicOff className="w-5 h-5" /> : <Mic className="w-5 h-5" />}
                                    <span>{isMuted ? 'Unmute' : 'Mute'}</span>
                                </button>

                                {/* End Call Button */}
                                <button
                                    onClick={endCall}
                                    className="w-full bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-full font-semibold transition-all flex items-center justify-center space-x-2"
                                    aria-label="End call"
                                >
                                    <PhoneOff className="w-5 h-5" />
                                    <span>End Call</span>
                                </button>
                            </div>

                            {/* Recording indicator */}
                            {isRecording && (
                                <div className="mt-3 flex items-center justify-center space-x-2 text-red-600">
                                    <div className="w-3 h-3 bg-red-600 rounded-full animate-pulse"></div>
                                    <span className="text-sm font-medium">Recording...</span>
                                </div>
                            )}

                            {/* Agent Status Indicators */}
                            {typingAgents.size > 0 && (
                                <div className="mt-3 flex items-center justify-center space-x-2 text-blue-600">
                                    <div className="w-3 h-3 bg-blue-600 rounded-full animate-pulse"></div>
                                    <span className="text-sm font-medium">
                                        {Array.from(typingAgents).join(', ')} {typingAgents.size === 1 ? 'is' : 'are'} typing...
                                    </span>
                                </div>
                            )}

                            {speakingAgents.size > 0 && (
                                <div className="mt-3 flex items-center justify-center space-x-2 text-green-600">
                                    <div className="w-3 h-3 bg-green-600 rounded-full animate-pulse"></div>
                                    <span className="text-sm font-medium">
                                        {Array.from(speakingAgents).join(', ')} {speakingAgents.size === 1 ? 'is' : 'are'} speaking
                                    </span>
                                </div>
                            )}
                        </div>
                    </div>

                    {/* Transcript Panel */}
                    <div className="lg:col-span-2">
                        <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                            <div className="flex items-center space-x-2 mb-4">
                                <MessageSquare className="w-5 h-5 text-blue-600" />
                                <h2 className="text-lg font-semibold text-gray-900">Conversation</h2>
                            </div>

                            <div className="bg-gray-50 rounded-lg p-4 h-[600px] overflow-y-auto space-y-4">
                                {transcript.length === 0 ? (
                                    <div className="text-center text-gray-400 py-20">
                                        <MessageSquare className="w-16 h-16 mx-auto mb-4 opacity-50" />
                                        <p className="text-lg font-semibold">Conversation will appear here...</p>
                                        <p className="text-sm mt-2">Click the blue "Press to Speak" button to start talking</p>
                                        <p className="text-xs mt-1">AI agents will respond with voice</p>
                                    </div>
                                ) : (
                                    transcript.map((entry, index) => (
                                        <div 
                                            key={index}
                                            className={`flex ${entry.type === 'user' ? 'justify-end' : 'justify-start'}`}
                                        >
                                            <div className={`max-w-[75%] rounded-2xl px-4 py-3 ${
                                                entry.type === 'user' 
                                                    ? 'bg-blue-600 text-white' 
                                                    : 'bg-white border border-gray-200 text-gray-900'
                                            }`}>
                                                <p className={`font-semibold text-sm mb-1 ${
                                                    entry.type === 'user' ? 'text-blue-100' : 'text-gray-600'
                                                }`}>
                                                    {entry.speaker}
                                                </p>
                                                <p className="text-sm">{entry.text}</p>
                                                <p className={`text-xs mt-1 ${
                                                    entry.type === 'user' ? 'text-blue-200' : 'text-gray-400'
                                                }`}>
                                                    {new Date(entry.timestamp).toLocaleTimeString()}
                                                </p>
                                            </div>
                                        </div>
                                    ))
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default AudioCall;

