version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: avinci-postgres
    environment:
      POSTGRES_DB: avinci
      POSTGRES_USER: avinci_admin
      POSTGRES_PASSWORD: ${DB_PASSWORD:-avinci_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - avinci-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: avinci-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - avinci-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: avinci-backend
    environment:
      NODE_ENV: production
      PORT: 9001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: avinci
      DB_USER: avinci_admin
      DB_PASSWORD: ${DB_PASSWORD:-avinci_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      ELEVENLABS_API_KEY: ${ELEVENLABS_API_KEY}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:9000}
    ports:
      - "9001:9001"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - avinci-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: avinci-frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:9001}
      REACT_APP_WS_URL: ${REACT_APP_WS_URL:-ws://localhost:9001}
    ports:
      - "9000:80"
    depends_on:
      - backend
    networks:
      - avinci-network
    restart: unless-stopped

  # Python Data Processing
  data-processing:
    build:
      context: ./data-processing
      dockerfile: Dockerfile
    container_name: avinci-data-processing
    environment:
      API_BASE_URL: http://backend:9001
      API_TOKEN: ${API_TOKEN}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - ./data-processing/data:/app/data
      - ./data-processing/logs:/app/logs
    depends_on:
      - backend
    networks:
      - avinci-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: avinci-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - avinci-network
    restart: unless-stopped

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: avinci-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - avinci-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: avinci-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - avinci-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local

networks:
  avinci-network:
    driver: bridge



